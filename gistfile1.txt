{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before you turn this problem in, make sure everything runs as expected. First, **restart the kernel** (in the menubar, select Kernel$\\rightarrow$Restart) and then **run all cells** (in the menubar, select Cell$\\rightarrow$Run All).\n",
    "\n",
    "Make sure you fill in any place that says `YOUR CODE HERE` or \"YOUR ANSWER HERE\", as well as your name and collaborators below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "NAME = \"Batsal Ghimire\"\n",
    "COLLABORATORS = \"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "1a4c3cfc3c34bf644ee45d91835b6f70",
     "grade": false,
     "grade_id": "cell-61b183447ded09ef",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "# CS110 Pre-class Work 5.2\n",
    "\n",
    "## Question 1.\n",
    "Using Figure 7.1 in Cormen et al. as a model, perform manually the partition process on the following list: A = [1,5,6,2,3,8,9,4,7]. You just need to specify the followings:\n",
    "1. The array after the process is done.\n",
    "2. The value of $i$ after the process is done."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "06dce98d07f8f042785a795b32e7ef75",
     "grade": true,
     "grade_id": "cell-7aa520f8af13679b",
     "locked": false,
     "points": 0,
     "schema_version": 1,
     "solution": true
    }
   },
   "source": [
    "1. The array A = [1,5,6,2,3,4,7,8,9]\n",
    "\n",
    "2. The pivot point that we took (r) is the last element of the array, this is why the value of i should be i = 6 (according to pseudocode). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "21059776e9083caf84e8abb5b6fb893e",
     "grade": false,
     "grade_id": "cell-6c0a9dfd6980c336",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 2.\n",
    "Code up a Python implementation of `partition(A, p, r)`, closely follow the pseudo-code in Cormen et al., p.172. Your function should return the index of the pivot in the array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "deletable": true
    "nbgrader": {
     "checksum": "395997ac94ed1416c67b22f7977c07a5",
     "grade": false,
     "grade_id": "cell-1ceb2600756c60ff",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def partition(A,p,r):\n",
    "    \"\"\"\n",
    "    Assume r<len(A) and p>=0\n",
    "    \"\"\"\n",
    "    pivot = A[r] #Takes last element of the array as the pivot\n",
    "    index = p-1 #Creates the index as  -1.\n",
    "    for i in range(p,r): #Iterated through the array\n",
    "        if A[i] <= pivot: #Checks if the i-th element is samller than the pivot element\n",
    "            index += 1 #Increments the index by 1 if true\n",
    "            A[index],A[i] = A[i], A[index] #Swaps the two elements to ensure that the smaller elements are to the left and bigger ones to the right.\n",
    "    A[index+1],A[r] = A[r], A[index+1] #Moves the pivot element after the smaller left part\n",
    "    return index+1 #Returns the index of the pivot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "34aa315313b6f9d8de8efe0922e5b563",
     "grade": true,
     "grade_id": "cell-a57b60117a7b82fb",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "A = [1,5,6,2,3,8,9,4,7]\n",
    "assert(partition(A, 0, len(A)-1)==6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "3496e310776eba92a8290d114db627cd",
     "grade": false,
     "grade_id": "cell-cd490c45f6733522",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 3.\n",
    "\n",
    "Code up your own Python implementation of `quicksort(A, p, r)`, using `partition(A,p,r)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "7e40c51fd1bd31c790aa0dd8abde1fb7",
     "grade": false,
     "grade_id": "cell-8c39ebb8cd1aa83a",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "import time\n",
    "def quick_sort(A,p,r): #Defines quick_sort function\n",
    "    if p<r: #Checks if there are more than one element in the list\n",
    "        q = partition(A,p,r) #Finds the index from the previous function and sets it as q\n",
    "        quick_sort(A,p,q-1) #Recursively sorts the first part of the array\n",
    "        quick_sort(A,q+1,r) #Recursively sorts the second half.\n",
    "    return A #Returns the sorted list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "80923d1142f0ef958a616db1105a8c1a",
     "grade": true,
     "grade_id": "cell-4f822430efd456ee",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "A = [0]\n",
    "assert(quick_sort(A, 0, 0) == [0])\n",
    "A = [3,1,2]\n",
    "assert(quick_sort(A, 0, 2) == [1,2,3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "741cfe874ccaef343713f81ec963360c",
     "grade": false,
     "grade_id": "cell-53941fba9302c591",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 4. \n",
    "Explain (using experimental plots) the running time of `quick_sort` when: \n",
    "1. all elements of array A have the same value (e.g., [1,1,1])?\n",
    "2. array A contains distinct elements sorted in decreasing order (e.g., [5,4,2,1])?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Both of these lists creates the worst case scenario for out quick sort algorithm. When all the elements are the same number, the breaking down of the list will make a very imbalanced subproblem everytime where one side will have no elements and the other side will have len(A)-1 elements.\n",
    "\n",
    "Also, for the second list, the last element which we choose to be our pivot point will be the largest element in the list. This creates a very similar problem to one we saw in previous case.\n",
    "\n",
    "The time complexity for both should be around: $O(n^2)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "f5ddaf0e684d72d229df078b18f321f8",
     "grade": true,
     "grade_id": "cell-b58035dd5fa02329",
     "locked": false,
     "points": 0,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "#Initializes the all the required lists to hold the running time, number of inputs and the list themselves.\n",
    "same_list = []\n",
    "decrease_list = []\n",
    "time_same = []\n",
    "time_decrease = []\n",
    "num_same = []\n",
    "num_decrease = []\n",
    "a = 0\n",
    "b = 0\n",
    "for i in range (2, 500): #Goes through the list given number of times\n",
    "    start_same = time.time() #Initializes the start time\n",
    "    same_list.append(1) #Adds one to the list every iteration\n",
    "    quick_sort(same_list,0,len(same_list)-1) #Calls the quick sort function\n",
    "    time_same.append(time.time()-start_same) #Records the end time and subtracts from the start time\n",
    "    num_same.append(a+1) #Captures the number of elements in the list\n",
    "    a = a+1\n",
    "\n",
    "for i in range (500, 2, -1): #Goes through the list given number of times\n",
    "    \n",
    "    start_decrease = time.time()#Initializes the start time\n",
    "    decrease_list.append(i) #Creates a list of decreasing order\n",
    "\n",
    "    quick_sort(decrease_list,0,len(decrease_list)-1)#Calls the quick sort function\n",
    "    time_decrease.append(time.time()-start_decrease)#Records the end time and subtracts from the start time\n",
    "    num_decrease.append(b+1) #Captures the number of elements in the list\n",
    "    b = b+1\n",
    "\n",
    "#PLots the graphs of the running time    \n",
    "plt.plot(num_same,time_same) \n",
    "plt.plot(num_decrease,time_decrease)\n",
    "plt.xlabel(\"Input size\")\n",
    "plt.ylabel(\"Running time\")\n",
    "plt.legend(['List with same Value','Inverse numbers array'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
